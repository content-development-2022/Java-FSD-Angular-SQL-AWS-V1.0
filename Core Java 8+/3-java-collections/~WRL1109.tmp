# Map

**Content**

1\. Map

1.1 HashMap

1.2 TreeMap

1.3 LinkedHashMap

2\. References

## 1. Map

-   A Map is an object that maps keys to values.
-   A map cannot contain duplicate keys.
-   There are three main implementations of Map interfaces:
1.  HashMap
2.  TreeMap
3.  LinkedHashMap.

## 1.1 HashMap

-   HashMap is like HashSet, it doesn’t maintain insertion order and doesn’t sort the elements in any order.
-   [Click here](https://beginnersbook.com/2013/12/hashmap-in-java-with-example/) to **learn HashMap in detail**.

# How HashMap works internally in Java?

## ![D:\\content-development-2022\\Revature-Next-Gen-Java-AWS-Angular-Extended-v3.1\\Core Java 8+\\3-java-collections\\media\\hashmap.png](media/hashmap.png)

## Add Items

The HashMap class has many useful methods. For example, to add items to it, use the put() method:

**Example**

```java
// Import the HashMap class
import java.util.HashMap;

public class Main {
  public static void main(String[] args) {
    // Create a HashMap object called capitalCities
    HashMap<String, String> capitalCities = new HashMap<String, String>();

    // Add keys and values (Country, City)
    capitalCities.put("England", "London");
    capitalCities.put("Germany", "Berlin");
    capitalCities.put("Norway", "Oslo");
    capitalCities.put("USA", "Washington DC");
    System.out.println(capitalCities);
  }
}
```

**Output:**

```
{USA=Washington DC, Norway=Oslo, England=London, Germany=Berlin}
```

## Access an Item

To access a value in the HashMap, use the get() method and refer to its key:

### Example

```java
capitalCities.get("England");
```

## Remove an Item

To remove an item, use the remove() method and refer to the key:

**Example**

```java
import java.util.HashMap;

public class Main {
  public static void main(String[] args) {
    HashMap<String, String> capitalCities = new HashMap<String, String>();
    capitalCities.put("England", "London");
    capitalCities.put("Germany", "Berlin");
    capitalCities.put("Norway", "Oslo");
    capitalCities.put("USA", "Washington DC");
    capitalCities.remove("England");
    System.out.println(capitalCities); 
  }
}
```

Output:

```
{USA=Washington DC, Norway=Oslo, Germany=Berlin}
```

To remove all items, use the clear() method:

**Example**

```java
capitalCities.clear();
```

## HashMap Size

To find out how many items there are, use the size() method:

**Example**

```java
capitalCities.size();
```

## Loop Through a HashMap

Loop through the items of a HashMap with a **for-each** loop.

**Note:** Use the keySet() method if you only want the keys, and use the values() method if you only want the values:

**Example**

// Print keys

```java
import java.util.HashMap;

public class Main {
  public static void main(String[] args) {
    HashMap<String, String> capitalCities = new HashMap<String, String>();
    capitalCities.put("England", "London");
    capitalCities.put("Germany", "Berlin");
    capitalCities.put("Norway", "Oslo");
    capitalCities.put("USA", "Washington DC");
    
    for (String i : capitalCities.keySet()) {
      System.out.println(i);
    }
  }
}
```

**Output:**

```
USA
Norway
England
Germany
```

// Print values

```java
import java.util.HashMap;

public class Main {
  public static void main(String[] args) {
    HashMap<String, String> capitalCities = new HashMap<String, String>();
    capitalCities.put("England", "London");
    capitalCities.put("Germany", "Berlin");
    capitalCities.put("Norway", "Oslo");
    capitalCities.put("USA", "Washington DC");
    
    for (String i : capitalCities.values()) {
      System.out.println(i);
    }
  }
}
```

**Ouput:**

```
Washington DC
Oslo
London
Berlin
```

### Example

// Print keys and values

```java
for (String i : capitalCities.keySet()) {
  System.out.println("key: " + i + " value: " + capitalCities.get(i));
}
```

**Example:**

```java
import java.util.*;
public class JavaExample{
  public static void main(String args[]){
    HashMap<Integer, String> hmap = new HashMap<>();

    //key and value pairs
    hmap.put(101, "Chaitanya");
    hmap.put(105, "Derick");
    hmap.put(111, "Logan");
    hmap.put(120, "Paul");

    //print HashMap elements
    Set set = hmap.entrySet();
    Iterator iterator = set.iterator();
    while(iterator.hasNext()) {
      Map.Entry m = (Map.Entry)iterator.next();
      System.out.print("key is: "+ m.getKey() + " & Value is: ");
      System.out.println(m.getValue());
    }
  }
}
```

**Output:**

```
Key is: 101 & value is: Chaitanya
Key is: 120 & value is: Paul
Key is: 105 & value is: Derick
Key is: 111 & value is: Logan
```

## 1.2 TreeMap

-   **TreeMap:** It stores its elements in a red-black tree.
-   The elements of TreeMap are sorted in ascending order.
-   It is substantially slower than HashMap.
-   [Click here](https://beginnersbook.com/2013/12/treemap-in-java-with-example/) to **learn TreeMap in detail with examples**.
-   This is the same example that we have seen above in HashMap. Here, elements are sorted based on keys.

    ![How TreeMap Works Internally in Java - Javatpoint](media/treemap.png)

## Creating a TreeMap

In order to create a TreeMap, we must import the java.util.TreeMap package first. Once we import the package, here is how we can create a TreeMap in Java.

TreeMap\<Key, Value\> numbers = new TreeMap\<\>();

In the above code, we have created a TreeMap named *numbers* without any arguments. In this case, the elements in TreeMap are sorted naturally (ascending order).

However, we can customize the sorting of elements by using the Comparator interface. We will learn about it later in this tutorial.

Here,

-   *Key* - a unique identifier used to associate each element (value) in a map
-   *Value* - elements associated by keys in a map

## Insert Elements to TreeMap

-   put() - inserts the specified key/value mapping (entry) to the map
-   putAll() - inserts all the entries from specified map to this map
-   putIfAbsent() - inserts the specified key/value mapping to the map if the specified key is not present in the map

For example,

```java
import java.util.TreeMap;
class Main {
public static void main(String[] args) {
// Creating TreeMap of even numbers
TreeMap<String, Integer> evenNumbers = new TreeMap<>();
// Using put()
evenNumbers.put("Two", 2);
evenNumbers.put("Four", 4);
// Using putIfAbsent()
evenNumbers.putIfAbsent("Six", 6);
System.out.println("TreeMap of even numbers: " + evenNumbers);
//Creating TreeMap of numbers
TreeMap<String, Integer> numbers = new TreeMap<>();
numbers.put("One", 1);
// Using putAll()
numbers.putAll(evenNumbers);
System.out.println("TreeMap of numbers: " + numbers);
}
}
```

**Output**

```
TreeMap of even numbers: {Four=4, Six=6, Two=2}
TreeMap of numbers: {Four=4, One=1, Six=6, Two=2}
```

## Access TreeMap Elements

**1. Using entrySet(), keySet() and values()**

-   entrySet() - returns a set of all the key/values mapping (entry) of a treemap
-   keySet() - returns a set of all the keys of a tree map
-   values() - returns a set of all the maps of a tree map

For example,

```java
import java.util.TreeMap;
class Main {
public static void main(String[] args) {
TreeMap<String, Integer> numbers = new TreeMap<>();
numbers.put("One", 1);
numbers.put("Two", 2);
numbers.put("Three", 3);
System.out.println("TreeMap: " + numbers);
// Using entrySet()
System.out.println("Key/Value mappings: " + numbers.entrySet());
// Using keySet()
System.out.println("Keys: " + numbers.keySet());
// Using values()
System.out.println("Values: " + numbers.values());
}
}
```

**Output**

```
TreeMap: {One=1, Three=3, Two=2}
Key/Value mappings: [One=1, Three=3, Two=2]
Keys: [One, Three, Two]
Values: [1, 3, 2]
```

## Remove TeeMap Elements

-   remove(key) - returns and removes the entry associated with the specified key from a TreeMap
-   remove(key, value) - removes the entry from the map only if the specified key is associated with the specified value and returns a boolean value

For example,

```java
import java.util.TreeMap;
class Main {
public static void main(String[] args) {
    TreeMap<String, Integer> numbers = new TreeMap<>();
    numbers.put("One", 1);
    numbers.put("Two", 2);
    numbers.put("Three", 3);
    System.out.println("TreeMap: " + numbers);
    // remove method with single parameter
    int value = numbers.remove("Two");
    System.out.println("Removed value: " + value);
    // remove method with two parameters
          boolean result = numbers.remove("Three", 3);
          System.out.println("Is the entry {Three=3} removed? " + result);
          System.out.println("Updated TreeMap: " + numbers);
}
}
```

**Output**

```
TreeMap: {One=1, Three=3, Two=2}
Removed value = 2
Is the entry {Three=3} removed? True
Updated TreeMap: {One=1}
```

## Replace TreeMap Elements

-   replace(key, value) - replaces the value mapped by the specified *key* with the new *value*
-   replace(key, old, new) - replaces the old value with the new value only if the old value is already associated with the specified key
-   replaceAll(function) - replaces each value of the map with the result of the specified *function*

**Example:**

```java
import java.util.TreeMap;
class Main {
public static void main(String[] args) {
    TreeMap<String, Integer> numbers = new TreeMap<>();
    numbers.put("First", 1);
    numbers.put("Second", 2);
    numbers.put("Third", 3);
    System.out.println("Original TreeMap: " + numbers);
    // Using replace()
    numbers.replace("Second", 22);
    numbers.replace("Third", 3, 33);
    System.out.println("TreeMap using replace: " + numbers);
     // Using replaceAll()
     numbers.replaceAll((key, oldValue) -> oldValue + 2);
     System.out.println("TreeMap using replaceAll: " + numbers);
}
}
```

**Output**

```
Original TreeMap: {First=1, Second=2, Third=3}
TreeMap using replace(): {First=1, Second=22, Third=33}
TreeMap using replaceAll(): {First=3, Second=24, Third=35}
```

Here, we have passed a lambda expression as an argument.

The replaceAll() method accesses all the entries of the map. It then replaces all the elements with the new values (returned from the lambda expression).

**Example:**

```java
import java.util.*;
public class JavaExample{
  public static void main(String args[]){
    TreeMap<Integer, String> hmap = new TreeMap<>();

    //key and value pairs
    hmap.put(101, "Chaitanya");
    hmap.put(105, "Derick");
    hmap.put(111, "Logan");
    hmap.put(120, "Paul");

    //print HashMap elements
    Set set = hmap.entrySet();
    Iterator iterator = set.iterator();
    while(iterator.hasNext()) {
      Map.Entry m = (Map.Entry)iterator.next();
      System.out.print("key is: "+ m.getKey() + " & Value is: ");
      System.out.println(m.getValue());
    }
  }
}
```

**Output:**

```
Key is: 101 & value is: Chaitanya
Key is: 105 & value is: Derick
Key is: 111 & value is: Logan
Key is: 120 & value is: Paul
```

## 1.3 LinkedHashMap

-   It maintains insertion order.
-   [Click here](https://beginnersbook.com/2013/12/linkedhashmap-in-java/), to learn LinkedHashMap in detail.
-   As you can see: In the following example, the key & value pairs maintained the insertion order.
-   Following image shows graphical representation of How LinkedHashMap works internally.
-   LinkedHashMap extends Node class of HashMap and contains two more variable **before** and **after** to hold the before and after references of Entry object.

![https://1.bp.blogspot.com/-fW_E_QPoc0E/XeDe5AhRZVI/AAAAAAAAGkE/Kh2Pl0U6ibkSezgh9e7i3fM2raciXE-bwCLcBGAsYHQ/s1600/How%2BLinkedHashMap%2Bworks.png](media/fd69b147d30150bedf0afb81d7800538.png)

**Example:**

```java
import java.util.*;
public class JavaExample{
  public static void main(String args[]){
    LinkedHashMap<Integer, String> hmap = new LinkedHashMap<>();

    //key and value pairs
    hmap.put(100, "Chaitanya");
    hmap.put(120, "Paul");
    hmap.put(105, "Derick");
    hmap.put(111, "Logan");

    //print LinkedHashMap elements
    Set set = hmap.entrySet();
    Iterator iterator = set.iterator();
    while(iterator.hasNext()) {
      Map.Entry m = (Map.Entry)iterator.next();
      System.out.print("key is: "+ m.getKey() + " & Value is: ");
      System.out.println(m.getValue());
    }
  }
}
```

**Output:**

```
key is: 100 & Value is: Chaitanya
key is: 120 & Value is: Paul
key is: 105 & Value is: Derick
key is: 111 & Value is: Logan
```

## 2. References

1.  https://beginnersbook.com/java-collections-tutorials/
2.  https://www.w3schools.com/java/java_hashmap.asp
3.  https://www.javaquery.com/2019/12/how-linkedhashmap-works-internally-in.html
4.  
